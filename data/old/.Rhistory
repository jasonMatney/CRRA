library(GGally)
library(h2o)
library(data.table)
library(bit64)
library(dplyr)
library(lubridate)
library(sf)
library(mapview)
library(leaflet)
library(leafgl)
library(sf)
library(htmlwidgets)
library(mapdeck)
library(colourvalues)
key <-'pk.eyJ1IjoianNubmRyd210bnkiLCJhIjoiY2s5MWpieWsyMDBubjNrbWt4MmxmbG12byJ9.po-u4nvZSTq4qrmj8095oA'
set_token( key )
df <- read.csv(paste0(
'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/',
'examples/3d-heatmap/heatmap-data.csv'
))
df <- df[!is.na(df$lng), ]
mapdeck( token = key, style = mapdeck_style("dark"), pitch = 45 ) %>%
add_grid(
data = df
, lat = "lat"
, lon = "lng"
, cell_size = 5000
, elevation_scale = 50
, layer_id = "grid_layer"
)
library(data.table)
library(GGally)
library(h2o)
library(data.table)
library(bit64)
library(dplyr)
library(lubridate)
library(sf)
library(mapview)
library(leaflet)
library(leafgl)
library(sf)
library(htmlwidgets)
library(mapdeck)
library(colourvalues)
library(data.table)
library(GGally)
library(h2o)
library(data.table)
library(bit64)
library(dplyr)
library(lubridate)
library(sf)
library(mapview)
library(leaflet)
library(leafgl)
library(sf)
library(htmlwidgets)
library(mapdeck)
library(colourvalues)
key <-'pk.eyJ1IjoianNubmRyd210bnkiLCJhIjoiY2s5MWpieWsyMDBubjNrbWt4MmxmbG12byJ9.po-u4nvZSTq4qrmj8095oA'
set_token( key )
df <- read.csv(paste0(
'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/',
'examples/3d-heatmap/heatmap-data.csv'
))
df <- df[!is.na(df$lng), ]
mapdeck( token = key, style = mapdeck_style("dark"), pitch = 45 ) %>%
add_grid(
data = df
, lat = "lat"
, lon = "lng"
, cell_size = 5000
, elevation_scale = 50
, layer_id = "grid_layer"
)
setwd("C:\\Users\\jmatney\\Documents\\CRRA")
gdb <- "C:\\Users\\jmatney\\Documents\\ArcGIS\\Projects\\CRRA\\CRRA.gdb"
flood <- st_read(dsn=gdb, layer="pc861_Flood_100yr_wgs84")
depth <- st_read(dsn=gdb, layer="pc861c_Depth_100yr_wgs84")
df_flood <- flood %>% st_drop_geometry()
df_flood <- cbind(df_flood, st_coordinates(flood))
df_depth <- depth %>% st_drop_geometry()
df_depth <- cbind(df_depth, st_coordinates(depth))
df_test <- df_depth[1:1000,]
df_test <- df_test[ , c("X","y","predict")]
df_test <- df_test[ , c("X","Y","predict")]
m <- mapdeck( style = mapdeck_style('dark'), pitch = 75 ) %>%
add_pointcloud(
data = df_test
, lon = 'X'
, lat = 'Y'
, radius = 2
, elevation = "predict"
, fill_colour = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("viridis")[70:256,])
)
m
m <- mapdeck( token = key,  style = mapdeck_style('dark'), pitch = 75 ) %>%
add_pointcloud(
data = df_test
, lon = 'X'
, lat = 'Y'
, radius = 2
, elevation = "predict"
, fill_colour = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("viridis")[70:256,])
)
m
mapdeck( token = key, style = mapdeck_style("dark"), pitch = 45 ) %>%
add_grid(
data = df_test
, lat = "Y"
, lon = "X"
, cell_size = 5000
, elevation_scale = 50
, layer_id = "grid_layer"
)
df <- read.csv(paste0(
'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/',
'examples/3d-heatmap/heatmap-data.csv'
))
head(df)
head(df_test)
head(df_depth)
df_test <- df_depth[1:1000,]
df_test <- df_test[ , c("X","Y","predict")]
head(df_test)
head(df_depth)
st_coordinates(depth)
setwd("C:\\Users\\jmatney\\Documents\\CRRA")
gdb <- "C:\\Users\\jmatney\\Documents\\ArcGIS\\Projects\\CRRA\\CRRA.gdb"
flood <- st_read(dsn=gdb, layer="pc861_Flood_100yr_wgs84")
depth <- st_read(dsn=gdb, layer="pc861c_Depth_100yr_wgs84")
df_flood <- flood %>% st_drop_geometry()
df_flood <- cbind(df_flood, st_coordinates(flood))
df_depth <- depth %>% st_drop_geometry()
df_depth <- cbind(df_depth, st_coordinates(depth))
head(df_depth)
df_test <- df_depth[1:1000,]
df_test <- df_test[ , c("X","Y","predict")]
head(df_test)
# head(df)
# mapdeck( token = key, style = mapdeck_style("dark"), pitch = 45 ) %>%
#   add_grid(
#     data = df_test
#     , lat = "Y"
#     , lon = "X"
#     , cell_size = 5000
#     , elevation_scale = 50
#     , layer_id = "grid_layer"
#   )
m <- mapdeck( token = key,  style = mapdeck_style('dark'), pitch = 75 ) %>%
add_pointcloud(
data = df_test
, lon = 'X'
, lat = 'Y'
, radius = 2
, elevation = "predict"
, fill_colour = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("viridis")[70:256,])
)
m
# head(df)
# mapdeck( token = key, style = mapdeck_style("dark"), pitch = 45 ) %>%
#   add_grid(
#     data = df_test
#     , lat = "Y"
#     , lon = "X"
#     , cell_size = 5000
#     , elevation_scale = 50
#     , layer_id = "grid_layer"
#   )
m <- mapdeck( token = key,  style = mapdeck_style('dark'), pitch = 75 ) %>%
add_pointcloud(
data = df_depth
, lon = 'X'
, lat = 'Y'
, radius = 2
, elevation = "predict"
, fill_colour = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("viridis")[70:256,])
)
saveWidget(m, "test.html")
# head(df)
# mapdeck( token = key, style = mapdeck_style("dark"), pitch = 45 ) %>%
#   add_grid(
#     data = df_test
#     , lat = "Y"
#     , lon = "X"
#     , cell_size = 5000
#     , elevation_scale = 50
#     , layer_id = "grid_layer"
#   )
m <- mapdeck( token = key,  style = mapdeck_style('dark'), pitch = 75 ) %>%
add_pointcloud(
data = df_depth
, lon = 'X'
, lat = 'Y'
, radius = 2
, elevation = "predict"
, fill_colour = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("viridis")[70:256,])
, legend = TRUE
)
# m
saveWidget(m, "test.html")
# head(df)
# mapdeck( token = key, style = mapdeck_style("dark"), pitch = 45 ) %>%
#   add_grid(
#     data = df_test
#     , lat = "Y"
#     , lon = "X"
#     , cell_size = 5000
#     , elevation_scale = 50
#     , layer_id = "grid_layer"
#   )
m <- mapdeck( token = key,  style = mapdeck_style('dark'), pitch = 75 ) %>%
add_pointcloud(
data = df_depth
, lon = 'X'
, lat = 'Y'
, radius = 2
, fill_colour = "predict"
, legend = TRUE
)
# m
saveWidget(m, "test.html")
head(df_flood)
fl <- mapdeck( token = key,  style = mapdeck_style('dark'), pitch = 75 ) %>%
add_pointcloud(
data = df_flood
, lon = 'X'
, lat = 'Y'
, radius = 2
, fill_colour = "predict"
, legend = TRUE
)
# m
saveWidget(fl, "flood_predict.html")
dp <- mapdeck( token = key,  style = mapdeck_style('satellite'), pitch = 75 ) %>%
add_pointcloud(
data = df_depth
, lon = 'X'
, lat = 'Y'
, radius = 2
, fill_colour = "predict"
, legend = TRUE
)
# m
saveWidget(dp, "depth_predict_satellite.html")
dsn="C:\\Users\\jmatney\\Documents\\CRRA\\data\\"
# ---Apply h2o library   ------- #
setwd(dsn)
pc_860 <- as.data.frame(fread(paste0(dsn,"Pork_C860.csv")))
objects(pc_860)
cols <- c("Depth_100yr_ft", "std_DEM_ft", "std_HOFG_ft", "std_Rainfall_mm_yr", "std_VOFD_ft","NLCD2016_Code")
pc_860$NLCD2016_Code <- factor(pc_860$NLCD2016_Code)
# convert into H2O frame
pc_861c<- as.h2o(pc_860)
library(h2o)
library(data.table)
library(bit64)
library(dplyr)
library(lubridate)
# Start local host with given number of threads plus give memory size
h2o.init(ip='localhost', port=54321, nthreads=-1, max_mem_size = '20g')
# To shutdown cluster
h2o.shutdown(prompt=TRUE)
h2o.removeAll()
# Cluster Info
h2o.clusterInfo()
# CLuster Status
h2o.clusterStatus()
dsn="C:\\Users\\jmatney\\Documents\\CRRA\\data\\"
# ---Apply h2o library   ------- #
setwd(dsn)
pc_860 <- as.data.frame(fread(paste0(dsn,"Pork_C860.csv")))
objects(pc_860)
cols <- c("Depth_100yr_ft", "std_DEM_ft", "std_HOFG_ft", "std_Rainfall_mm_yr", "std_VOFD_ft","NLCD2016_Code")
pc_860$NLCD2016_Code <- factor(pc_860$NLCD2016_Code)
# convert into H2O frame
pc_861c<- as.h2o(pc_860)
## Splits datasets into train, valid and test
splits<- h2o.splitFrame(data=pc_861c, ratios=c(0.5,0.25), seed=1236)
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
# Define response and predictors #
response <- "Depth_100yr_ft"
predictors <- cols[-1]
gc()
str(train)
## run our first predictive model
rf861c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf861c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=10,
##   not required, but helps use Flow
ntrees = 200,                  ## use a maximum of 200 trees to create the
max_depth = 60,
stopping_rounds = 2,           ## Stop fitting new trees when the 2-tree
#  keep_cross_validation_predictions = T,
stopping_tolerance = 1e-2,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
###############################################################################
summary(rf861c)
# Variable Importance
h2o.varimp_plot(rf861c)
# predict in test environment
testHex <- as.h2o(test)
test1<- as.data.frame(testHex)
head(test1)
pc_test<-as.data.frame(h2o.predict(rf861c,testHex))
summary(pc_test)
head(pc_test)
dim(pc_test)
class(pc_test)
p2_1<- cbind(as.data.frame(test), pc_test)
head(p2_1)
dim(p2_1)
# predict in train (100%) environment
trainHex <- as.h2o(train)
p3 <-as.data.frame(h2o.predict(rf861c,trainHex))
dim(p3)
dim(train)
class(train)
p3_1<- cbind(as.data.frame(train), p3)
count(p3_1)
head(p3_1)
summary(p3)
# predict in Validate environment
validHex <- as.h2o(valid)
p4 <-as.data.frame(h2o.predict(rf861c,validHex))
head(p4)
dim(p4)
dim(valid)
head(valid)
class(valid)
p4_1<- cbind2(as.data.frame(valid), p4)
dim(p4_1)
# Combine all data
pc_final<- rbind(p2_1, p3_1, p4_1)
dim(pc_final)
dim(pc_860)
head(pc_final)
# retrieve the model performance
perf <- h2o.performance(rf861c, valid)
perf
perf1 <- h2o.performance(rf861c, test)
perf1
perf2 <- h2o.performance(rf861c, train)
perf2
h2o.confusionMatrix(rf861c, train)
head(cols)
head(pc_860)
cols <- c("Flooding_500yr_Binary", "std_DEM_ft", "std_HOFG_ft", "std_Rainfall_mm_yr", "std_VOFD_ft","NLCD2016_Code")
pc_860$NLCD2016_Code <- factor(pc_860$NLCD2016_Code)
# convert into H2O frame
pc_861c<- as.h2o(pc_860)
## Splits datasets into train, valid and test
splits<- h2o.splitFrame(data=pc_861c, ratios=c(0.5,0.25), seed=1236)
rm(list=ls())
library(h2o)
library(data.table)
library(bit64)
library(dplyr)
library(lubridate)
# Start local host with given number of threads plus give memory size
h2o.init(ip='localhost', port=54321, nthreads=-1, max_mem_size = '20g')
# To shutdown cluster
h2o.shutdown(prompt=TRUE)
h2o.removeAll()
# Cluster Info
h2o.clusterInfo()
# CLuster Status
h2o.clusterStatus()
dsn="C:\\Users\\jmatney\\Documents\\CRRA\\data\\"
# ---Apply h2o library   ------- #
setwd(dsn)
pc_860 <- as.data.frame(fread(paste0(dsn,"Pork_C860.csv")))
objects(pc_860)
head(pc_860)
cols <- c("Flooding_500yr_Binary", "std_DEM_ft", "std_HOFG_ft", "std_Rainfall_mm_yr", "std_VOFD_ft","NLCD2016_Code")
pc_860$NLCD2016_Code <- factor(pc_860$NLCD2016_Code)
# convert into H2O frame
pc_861c<- as.h2o(pc_860)
## Splits datasets into train, valid and test
splits<- h2o.splitFrame(data=pc_861c, ratios=c(0.5,0.25), seed=1236)
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
# Define response and predictors #
response <- "Flooding_500yr_Binary"
predictors <- cols[-1]
gc()
str(train)
## run our first predictive model
rf861c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf861c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=10,
##   not required, but helps use Flow
ntrees = 200,                  ## use a maximum of 200 trees to create the
max_depth = 60,
stopping_rounds = 2,           ## Stop fitting new trees when the 2-tree
#  keep_cross_validation_predictions = T,
stopping_tolerance = 1e-2,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
###############################################################################
summary(rf861c)
# Variable Importance
h2o.varimp_plot(rf861c)
# predict in test environment
testHex <- as.h2o(test)
test1<- as.data.frame(testHex)
head(test1)
h2o.confusionMatrix(rf861c, train)
head(pc_860)
str(pc_860)
pc_860$Flooding_500yr_Binary <- factor(pc_860$Flooding_500yr_Binary)
# convert into H2O frame
pc_861c<- as.h2o(pc_860)
## Splits datasets into train, valid and test
splits<- h2o.splitFrame(data=pc_861c, ratios=c(0.5,0.25), seed=1236)
## assign the first result the R variable train
train <- h2o.assign(splits[[1]], "train.hex")   ## and the H2O name train.hex
valid <- h2o.assign(splits[[2]], "valid.hex")   ## R valid, H2O valid.hex
test <- h2o.assign(splits[[3]],  "test.hex")     ## R test, H2O test.hex
# Define response and predictors #
response <- "Flooding_500yr_Binary"
predictors <- cols[-1]
gc()
str(train)
## run our first predictive model
rf861c <- h2o.randomForest(        ## h2o.randomForest function
model_id = "rf861c",             ## name the model in H2O
training_frame = train,        ## the H2O frame for training
validation_frame = valid,      ## the H2O frame for validation (not required)
x=predictors,                  ## the predictor columns, by column index
y=response,                    ## the target index (what we are predicting)
nfolds=10,
##   not required, but helps use Flow
ntrees = 200,                  ## use a maximum of 200 trees to create the
max_depth = 60,
stopping_rounds = 2,           ## Stop fitting new trees when the 2-tree
#  keep_cross_validation_predictions = T,
stopping_tolerance = 1e-2,     ##
score_each_iteration = T,      ## Predict against training and validation for
## each tree. Default will skip several. fold_assignment = stratified,
seed = 111)                    ## Set the random seed so that this can be reproduced.
###############################################################################
summary(rf861c)
h2o.confusionMatrix(rf861c, train)
# Variable Importance
h2o.varimp_plot(rf861c)
# predict in test environment
testHex <- as.h2o(test)
test1<- as.data.frame(testHex)
head(test1)
pc_test<-as.data.frame(h2o.predict(rf861c,testHex))
summary(pc_test)
head(pc_test)
dim(pc_test)
class(pc_test)
p2_1<- cbind(as.data.frame(test), pc_test)
head(p2_1)
dim(p2_1)
# predict in train (100%) environment
trainHex <- as.h2o(train)
p3 <-as.data.frame(h2o.predict(rf861c,trainHex))
dim(p3)
dim(train)
class(train)
p3_1<- cbind(as.data.frame(train), p3)
count(p3_1)
head(p3_1)
summary(p3)
# predict in Validate environment
validHex <- as.h2o(valid)
p4 <-as.data.frame(h2o.predict(rf861c,validHex))
head(p4)
dim(p4)
dim(valid)
head(valid)
class(valid)
p4_1<- cbind2(as.data.frame(valid), p4)
dim(p4_1)
# Combine all data
pc_final<- rbind(p2_1, p3_1, p4_1)
dim(pc_final)
dim(pc_860)
head(pc_final)
dim(pc_final)
head(p2_1)
dim(p2_1)
dim(test)
head(train)
h2o.confusionMatrix(rf861c, test)
head(pc_final)
rf861c
dim(rf861c)
perf2 <- h2o.performance(rf861c, pc_final$predict)
h2o.confusionMatrix(rf861c, pc_final)
h2o_final <- as.h2o(pc_final)
