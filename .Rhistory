read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/wbdhuc12_15Jason.csv")
read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/all_hexagons_50c_grouped_withCounties.csv")
read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/all_hexagons_50c_grouped_withCounties.csv")
hex <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/all_hexagons_50c_grouped_withCounties.csv")
huc12 <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/wbdhuc12_15Jason.csv")
hex <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/all_hexagons_50c_grouped_withCounties.csv")
library(dplyr)
str(huc12)
str(hex)
head(hex)
names(hex)[1]
names(hex)[1] <- c("subwatershed")
head(hex)
huc12 %>% inner_join(hex, by = "subwatershed")
huc12_hex <- huc12 %>% inner_join(hex, by = "subwatershed")
sub <- "subwatershed"
policy <- "policy_total_building_coverage_avg"
claims <- "claims_total_building_insurance_coverage_avg"
hex <- hex[names(hex) %in% c(sub, policy, claims),]
head(hex)
hex <- hex %>% filter(names(hex) %in% c(sub, policy, claims))
hex <- hex %>% filter(hex, names(hex) %in% c(sub, policy, claims))
hex <- hex %>% select(sub, policy, claims)
library(dplyr)
huc12 <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/wbdhuc12_15Jason.csv")
hex <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/all_hexagons_50c_grouped_withCounties.csv")
sub <- "subwatershed"
policy <- "policy_total_building_coverage_avg"
claims <- "claims_total_building_insurance_coverage_avg"
names(hex)[1] <- c(sub)
head(hex)
hex <- hex %>% select(sub, policy, claims)
rm(list=ls())
library(dplyr)
huc12 <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/wbdhuc12_15Jason.csv")
hex <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/all_hexagons_50c_grouped_withCounties.csv")
sub <- "subwatershed"
policy <- "policy_total_building_coverage_avg"
claims <- "claims_total_building_insurance_coverage_avg"
names(hex)[1] <- c(sub)
head(hex)
hex <- hex %>% select(sub, policy, claims)
head(hex)
huc12_hex <- huc12 %>% inner_join(hex, by = "subwatershed")
dim(huc12_hex)
head(huc12_hex)
getwd()
setwd(paste0(getwd,"/GitHub/IndianaML/data"))
setwd("C:/Users/jmatney/Documents/GitHub/IndianaML/data")
setwd("C:\\Users\\jmatney\\Document\\/GitHub\\IndianaML\\data")
setwd("C:\\Users\\jmatney\\Document\\GitHub\\")
write.csv(huc12_hex, "huc12_hex_extra30.csv")
list <- c(51202040603,
51202070703,
51202040404,
51201030105,
51202070504,
50902030505,
51202080806,
51201040101,
50800030102,
51202080801,
51202010606,
50800030303,
51202060301,
51201011004,
51201080410,
40400010503,
51202010103,
51201060509,
50800030803,
51201011404,
51201100402,
51202040806,
51202060105,
51201040705,
40400010303,
51201081104,
51201030404,
51202010108,
40500011506,
51202011502,
51201060205,
51202040302,
51202060503,
51402010907,
51402010908,
51201011507,
51202010610,
51201130704,
40500011001,
51201081205,
51202060107,
51202030405)
list
40*11
44/60
440/60
write.csv(list,"list.csv")
list <- c(051201111902,
051202081501,
051202060503,
051202030602,
051202090103,
040400010303,
051202011502,
051201040506,
051201060205,
040400010503,
051202040302,
050902031007,
051201130704,
071200021301,
051202010103,
051202040603,
051201070101,
051201100602,
051202060301,
051202070303,
051201070109,
051401040302,
051201100402,
050800030803,
071200010703,
051201040304,
051202040806,
051402010501,
051202070504,
071200010502,
041000050102,
040500011506,
051201020103,
051202080806,
051401010404,
050800030303,
040500011001,
051201030404,
051201060509,
050902030507,
051201080410,
051201040705,
051201111202,
051202080801,
051201081205,
051202010610,
051201081104,
051202060107,
051402010907,
051201111512,
050902030505,
051401041105,
051202020904,
051402010908,
)
list <- c(051201111902,
051202081501,
051202060503,
051202030602,
051202090103,
040400010303,
051202011502,
051201040506,
051201060205,
040400010503,
051202040302,
050902031007,
051201130704,
071200021301,
051202010103,
051202040603,
051201070101,
051201100602,
051202060301,
051202070303,
051201070109,
051401040302,
051201100402,
050800030803,
071200010703,
051201040304,
051202040806,
051402010501,
051202070504,
071200010502,
041000050102,
040500011506,
051201020103,
051202080806,
051401010404,
050800030303,
040500011001,
051201030404,
051201060509,
050902030507,
051201080410,
051201040705,
051201111202,
051202080801,
051201081205,
051202010610,
051201081104,
051202060107,
051402010907,
051201111512,
050902030505,
051401041105,
051202020904,
051402010908
)
write.csv(list,"hotfix_list.csv")
rm(list=ls())
library(dplyr)
original <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/IN_DL_05202020_original.csv")
hotfix <- read.csv("C:/Users/jmatney/Documents/GitHub/IndianaRisk/data/IN_DL_05202020_hotfix.csv")
new <- original %>% inner_join(hotfix, by = "subwatershed")
dim(new)
dim(original)
new <- original %>% join(hotfix, by = "subwatershed")
new <- original %>% outer_join(hotfix, by = "subwatershed")
new <- original %>% right_join(hotfix, by = "subwatershed")
dim(new)
new <- original %>% left_join(hotfix, by = "subwatershed")
dim(new)
head(new)
write.csv(new, "modified.csv")
rm(list=ls())
library(data.table)
library(dplyr)
library(readbulk)
library(keras)
library(dataPreparation)
library(tidyverse)
# install_keras()
dsn="C:\\Users\\jmatney\\Documents\\GitHub\\CRRA"
setwd(dsn)
# raw_data <- read_bulk(directory = "data\\hybrid")
# dim(raw_data)
# df <- raw_data[ !names(raw_data) %in% c("Index","File")]
df <- as.data.frame(fread(paste0(dsn, "\\data\\hybrid\\CRRA_data.csv")))
# remove -9999
df <- df[which(df$Dep_100yr_Depth_ft != -9999), ]
# Random sample indexes
train_index <- sample(1:nrow(df), 0.8 * nrow(df))
test_index <- setdiff(1:nrow(df), train_index)
train_data <- df[train_index, ]
train_data <- dplyr::select(train_data, -c("x","y"))
test_data <- df[test_index, ]
test_data <- dplyr::select(test_data, -c("x","y"))
rm(list=ls())
library(data.table)
library(dplyr)
library(readbulk)
library(keras)
library(dataPreparation)
library(tidyverse)
# install_keras()
dsn="C:\\Users\\jmatney\\Documents\\GitHub\\CRRA"
setwd(dsn)
df <- as.data.frame(fread(paste0(dsn, "\\data\\hybrid\\CRRA_data.csv")))
# remove -9999
df <- df[which(df$Dep_100yr_Depth_ft != -9999), ]
# Random sample indexes
train_index <- sample(1:nrow(df), 0.8 * nrow(df))
test_index <- setdiff(1:nrow(df), train_index)
train_data <- df[train_index, ]
train_data <- dplyr::select(train_data, -c("x","y"))
test_data <- df[test_index, ]
test_data <- dplyr::select(test_data, -c("x","y"))
y <- "Dep_100yr_Depth_ft"
# Build X_train, y_train, X_test, y_test
x_train <- as.matrix(dplyr::select(train_data, -c(y)))
y_train <- as.matrix(dplyr::select(train_data, c(y)))
x_test <- as.matrix(dplyr::select(test_data, -c(y)))
y_test <- as.matrix(dplyr::select(test_data, c(y)))
######################
## Create the model ##
######################
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu",
input_shape = dim(x_train)[2]) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list("mean_absolute_error")
)
model
}
model <- build_model()
model %>% summary()
model <- build_model()
model %>% summary()
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
# Fit the model and store training stats
history <- model %>% fit(
x_train,
y_train,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(print_dot_callback)
)
epochs <- 10
# Fit the model and store training stats
history <- model %>% fit(
x_train,
y_train,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(print_dot_callback)
)
head(train_data)
head(x_train)
class(x_train)
class(y_train)
head(y_train)
?fit
